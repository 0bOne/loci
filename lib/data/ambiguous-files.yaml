# ADSO/IDSM:
#   id-by:
#     extension: [adso]
# Ant/XML:
#   id-by:
#     filename: [build.xml]
#     rules-todo: Ant or XML
# D/dtrace:
#   id-by:
#     extension: [d]
#     rules-todo: d or dtrace
# Maven/XML:
#   id-by:
#     filename: [pom.xml]
#     rules-todo: Maven or XML
# Verilog-SystemVerilog/Coq:
#   id-by:
#     extension: [v]
#     rules-todo: Verilog or Coq
TypeScript/Qt Linguist:
  id-by:
    extension: [ts]
  scoring-rules:
  - {method: "match", points: 100, for: "Qt Linguist", pattern: '\b</?(message|source|translation)>', flags: "m"}
  - {method: "match", points: 1, for: "TypeScript", pattern: '^\s*(var|const|let|class|document)\b', flags: "m"}
  - {method: "match", points: 1, for: "TypeScript", pattern: '[;}]\s*$', flags: "m"}
  - {method: "match", points: 1, for: "TypeScript", pattern: '^\s*', flags: "m"}
C#/Smalltalk:
  id-by:
    extension: [cs]
  filters: #apply these filters before scoring
  - {method: "remove", pattern: 's{//.*?$}', flags: "gm"}
  scoring-rules:
  - {method: "match", points: 1, for: "C#", pattern: '[;}{]\s*$', flags: "m"}
  - {method: "match", points: 19, for: "C#", pattern: '^(using|namespace)\s', flags: "m"}
  - {method: "match", points: 19, for: "C#", pattern: '^\s*(public|private|new)\s', flags: "m"}
  - {method: "match", points: 1, for: "Smalltalk", pattern: '(\!|\]\.)\s*$', flags: "m"}
  - {method: "match", points: -1, for: "C#", pattern: '(\!|\]\.)\s*$', flags: "m"}
IDL/QtProject/Prolog/ProGuard:
  id-by:
    extension: [pro]
  scoring-rules:
  - {method: "match", points: 1, for: "IDL", pattern: '^\s*;', flags: "m"}
  - {method: "match", points: 1, for: "IDL", pattern: 'plot\(', flags: "mi"}
  - {method: "match", points: 1, for: "Qt Project", pattern: '^\s*(qt|configs|sources|template|target|targetpath|subdirs)\b', flags: "mi"}
  - {method: "match", points: 1, for: "Qt Project", pattern: '/qthavemodule/', flags: "mi"}
  - {method: "match", points: 1, for: "Prolog", pattern: '\.\s*$', flags: "m"}
  - {method: "match", points: 1, for: "Prolog", pattern: ':-', flags: "m"}
  - {method: "match", points: 1, for: "ProGuard", pattern: '^\s*#', flags: "m"}
  - {method: "match", points: 1, for: "ProGuard", pattern: '^-keep', flags: "m"}
  - {method: "match", points: 1, for: "ProGuard", pattern: "^-(dont)?obfuscate", flags: "m"}
Scheme/SaltStack:
  id-by:
    extension: [sls]
  scoring-rules:
  - {method: "match", points: 4, for: "SaltStack", pattern: '{\%.*%}*', flags: "m"}
  - {method: "match", points: 4, for: "SaltStack", pattern: '(/map\.jinja\b/)', flags: "m"}
  - {method: "match", points: 1, for: "Scheme", pattern: '\((define|lambda|let|cond|do)\s', flags: "m"}
Fortran 77/Forth:
  id-by:
    extension: [f, for]
  scoring-rules:
  - {method: "match", points: 2, for: "Forth", pattern: '^:\s', flags: "m"}
  - {method: "match", points: 2, for: "Fortran 77", pattern: '^([c*][^a-z]|\s{6,}(subroutine|program|end|implicit)\s|\s*!)', flags: "mi"}
F#/Forth:
  id-by:
    extension: [fs]
    heuristic: Forth_or_Fsharp
  scoring-rules:
  - {method: "match", points: 2, for: "Forth", pattern: '^:\s', flags: "m"}
  - {method: "match", points: 2, for: "F#", pattern: '^\s*(#light|import|let|module|namespace|open|type)', flags: "m"}
Qt/Glade:
  id-by:
    extension: [ui]
    heuristic: Qt_or_Glade
  scoring-rules:
  - {method: "bias", points: 5, for: "Qt"}
  - {method: "match", points: 10, for: "Glade", pattern: 'generated\s+with\s+glade', flags: "mi"}
Visual Basic/TeX/Apex Class:
  id-by:
    extension: [cls]
  scoring-rules:
  - {method: "match", points: 1, for: "TeX", pattern: '\s*%', flags: "m"}
  - {method: "match", points: 1, for: "TeX", pattern: '\s*\\', flags: "m"}
  - {method: "match", points: 1, for: "Visual Basic", pattern: '^\s*(public|private)\s', flags: "mi"}
  - {method: "match", points: 1, for: "Apex Class", pattern: '^\s*(public|private)\s', flags: "mi"}
  - {method: "match", points: 1, for: "Visual Basic", pattern: '^\s*(end|attribute|version)\s', flags: "mi"}
  - {method: "match", points: 1, for: "Apex Class", pattern: '[{}]', flags: "m"}
  - {method: "match", points: 1, for: "Apex Class", pattern: ';\s*$', flags: "m"}
Lisp/Julia:
  id-by:
    extension: [jl]
  scoring-rules:
  - {method: "bias", points: 1, for: "Julia"}
  - {method: "match", points: 1, for: "Lisp", pattern: '^\s*;', flags: "m"}
  - {method: "match", points: 1, for: "Lisp", pattern: '\((def|eval|require|export|let|loop|dec|format)', flags: "m"}
  - {method: "match", points: 1, for: "Julia", pattern: '^\s*(function|end|println|for|while)', flags: "m"}
MATLAB/Mathematica/Objective-C/MUMPS/Mercury:
  id-by:
    extension: [m]
  scoring-rules:
  - {method: "match", points: 1, for: "MUMPS", pattern: '^[A-Z]', flags: "m"}            
  - {method: "match", points: 5, for: "Objective-C", pattern: '^\s*/\*', flags: "m"}
  - {method: "match", points: 5, for: "Objective-C", pattern: '^\s*//', flags: "m"}
  - {method: "match", points: -5, for: "MATLAB", pattern: '^\s*/\*', flags: "m"}  
  - {method: "match", points: -5, for: "MATLAB", pattern: '^\s*//', flags: "m"}
  - {method: "match", points: 1000, for: "Mercury", pattern: '^:-\s+', flags: "m"}
  - {method: "match", points: 5, for: "MATLAB", pattern: '\w+\s*=\s*\[', flags: "m"}
  - {method: "match", points: 2, for: "Mathematica", pattern: '\w+\[', flags: "m"}
  - {method: "match", points: -1000, for: "MUMPS", pattern: '^\s*\w+\s*=\s*', flags: "m"}
  - {method: "match", points: 1, for: "MUMPS", pattern: '^\s*\.?(\w)\s+(\w)', flags: "m"}
  - {method: "match", points: 1, for: "MUMPS", pattern: '^\s*;', flags: "m"}
  - {method: "match", points: 1000, for: "Objective-C", pattern: '^\s*#(include|import)', flags: "m"}
  - {method: "match", points: -1000, for: "MATLAB", pattern: '^\s*#(include|import)', flags: "m"}
  - {method: "match", points: 1000, for: "Objective-C", pattern: '^\s*@(interface|implementation|protocol|public|protected|private|end)\s', flags: "m"}
  - {method: "match", points: -1000, for: "MATLAB", pattern: '^\s*@(interface|implementation|protocol|public|protected|private|end)\s', flags: "m"}
  - {method: "match", points: 2, for: "Mathematica", pattern: '^\s*BeginPackage', flags: "m"}
  - {method: "match", points: 2, for: "MATLAB", pattern: '^\s*\[', flags: "m"}
  - {method: "match", points: 5, for: "MUMPS", pattern: '^\sK(ill)?\s+', flags: "m"}
  - {method: "match", points: -1, for: "Objective-C", pattern: '^\s*function', flags: "m"}
  - {method: "match", points: 1, for: "MATLAB", pattern: '^\s*function', flags: "m"}
  - {method: "match", points: 1, for: "MATLAB", pattern: '^\s*%', flags: "m"}
  - {method: "match", points: -1, for: "Objective-C", pattern: 'm{^\s*%', flags: "m"}
Pascal/Puppet:
  id-by:
    extension: [pp]
  scoring-rules:
  - {method: "match", points: 1, for: "Puppet", pattern: '^\s*\#\s+', flags: "m"}           
  - {method: "match", points: 1, for: "Pascal", pattern: '\bprogram\s+[A-Za-z]', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '\bunit\s+[A-Za-z]', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '\bmodule\s+[A-Za-z]', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '\bprocedure\b', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '\bfunction\b', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '^\s*interface\s+', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '^\s*implementation\s+', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '^\s*uses\s+', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '\bmodule\s+[A-Za-z]', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '(?<!\:\:)\bbegin\b(?!\:\:)', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '\:\=', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '\<\>', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '^\s*\{\$(I|INCLUDE)\s+.*\}', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: 'writeln', flags: "mi"}
  - {method: "match", points: 1, for: "Puppet", pattern: '^\s*class\s', flags: "i"}
  - {method: "match", points: -1, for: "Puppet", pattern: 'class\s+operator\s+', flags: "m"}
  - {method: "match", points: 1, for: "Puppet", pattern: '^\s*function\s+[a-z][a-z0-9]+::[a-z][a-z0-9]+\s*', flags: "m"}
  - {method: "match", points: 1, for: "Puppet", pattern: '^\s*type\s+[A-Z]\w+::[A-Z]\w+\s+', flags: "m"}
  - {method: "match", points: 1, for: "Puppet", pattern: '^\s*case\s+', flags: "m"}
  - {method: "match", points: 1, for: "Puppet", pattern: '^\s*package\s', flags: "m"}
  - {method: "match", points: 1, for: "Puppet", pattern: '^\s*file\s+', flags: "m"}
  - {method: "match", points: 1, for: "Puppet", pattern: '^\s*include\s\w+', flags: "m"}
  - {method: "match", points: 1, for: "Puppet", pattern: '^\s*service\s+', flags: "m"}
  - {method: "match", points: 1, for: "Puppet", pattern: '\s\$\w+\s*\=\s*\S', flags: "m"}
  - {method: "match", points: 1, for: "Puppet", pattern: '\S\s*\=\>\s*\S', flags: "m"}
Raku/Prolog:
  id-by: 
    extension: [p6, P6]
  scoring-rules:
  - {method: "match", points: 100, for: "Raku", pattern: '^#!.*?\bperl*;', flags: "m"}
  - {method: "match", points: 1, for: "Raku", pattern: '^=(head|over|item|cut)', flags: "m"}
  - {method: "match", points: 1, for: "Raku", pattern: ';\s*$', flags: "m"}
  - {method: "match", points: 1, for: "Raku", pattern: '(\{|\})', flags: "m"}
  - {method: "match", points: 1, for: "Raku", pattern: '^\s*sub\s+', flags: "m"}
  - {method: "match", points: 1, for: "Raku", pattern: '\s*<<', flags: "m"}
  - {method: "match", points: 1, for: "Raku", pattern: '\$(\w+\->|[_!])', flags: "m"}
  - {method: "match", points: 1, for: "Prolog", pattern: '\s*#', flags: "m"}
  - {method: "match", points: 1, for: "Prolog", pattern: '\.\s*$', flags: "m"}
  - {method: "match", points: 1, for: "Prolog", pattern: ":-", flags: "m"}
Perl/Prolog:
  id-by:
    extension: [pl, PL]
  scoring-rules:
  - {method: "match", points: 100, for: "Perl", pattern: '^#!.*?\bperl*;', flags: "m"}
  - {method: "match", points: 1, for: "Perl", pattern: '^=(head|over|item|cut)', flags: "m"}
  - {method: "match", points: 1, for: "Perl", pattern: ';\s*$', flags: "m"}
  - {method: "match", points: 1, for: "Perl", pattern: '(\{|\})', flags: "m"}
  - {method: "match", points: 1, for: "Perl", pattern: '^\s*sub\s+', flags: "m"}
  - {method: "match", points: 1, for: "Perl", pattern: /\s*<<'/, flags: "m"}
  - {method: "match", points: 1, for: "Perl", pattern: '\$(\w+\->|[_!])', flags: "m"}
  - {method: "match", points: 1, for: "Prolog", pattern: '\s*#', flags: "m"}
  - {method: "match", points: 1, for: "Prolog", pattern: '\.\s*$', flags: "m"}
  - {method: "match", points: 1, for: "Prolog", pattern: ":-", flags: "m"}
Lisp/OpenCL:
  id-by:
    extension: [cl]
  scoring-rules:
  - {method: "match", points: 100, for: "Lisp", pattern: '^\s*;', flags: "m"}
  - {method: "match", points: 100, for: "Lisp", pattern: '\((def|eval|require|export|let|loop|dec|format)', flags: "m"}
  - {method: "match", points: 100, for: "OpenCL", pattern: '^\s*(int|float|const|{)', flags: "m"}
PHP/Pascal:
  id-by:
    extension: [inc]
  scoring-rules:
  - {method: "match", points: 1, for: "Pascal", pattern: '\bprogram\s+[A-Za-z]', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '\bunit\s+[A-Za-z]', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '\bmodule\s+[A-Za-z]', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '\bprocedure\b', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '\bfunction\b', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '^\s*interface\s+', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '^\s*implementation\s+', flags: "mi"}
  - {method: "match", points: 1, for: "Pascal", pattern: '\bbegin\b', flags: "mi"}
  - {method: "match", points: 1, for: "PHP", pattern: '\<\?', flags: "m"}
  - {method: "match", points: 1, for: "PHP", pattern: '\?\>', flags: "m"}
  - {method: "match", points: 100, for: "PHP", pattern: '\<script.*language="?php"?', flags: "mi"}
  - {method: "match", points: 001, for: "PHP", pattern: '\<\/script\>', flags: "mi"}
  - {method: "match", points: 100, for: "PHP", pattern: '<\%', flags: "m"}
  - {method: "match", points: 100, for: "PHP", pattern: '%\>', flags: "m"}
 
